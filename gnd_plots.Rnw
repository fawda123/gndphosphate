\documentclass[letterpaper,12pt]{article}
\usepackage[top=1in,bottom=1in,left=1in,right=1in]{geometry}
\usepackage{setspace}
\usepackage[colorlinks=true,urlcolor=blue,citecolor=blue,linkcolor=blue]{hyperref}
\usepackage{indentfirst}
\usepackage{multirow}
\usepackage{booktabs}
\usepackage[final]{animate}
\usepackage{graphicx}
\usepackage{verbatim}
\usepackage{rotating}
\usepackage{tabularx}
\usepackage{array}
\usepackage{subfig} 
\usepackage[noae]{Sweave}
\usepackage{cleveref}
\usepackage[figureposition=bottom]{caption}
\usepackage{paralist}
\usepackage{acronym}
\usepackage{outlines}
\usepackage{pdflscape}

% knitr options
<<setup, echo = FALSE, cache = F>>=
library(knitr)
# set global chunk options
opts_chunk$set(fig.path = 'figs/', fig.align = 'center', fig.show = 'hold',message = F, results = 'asis',dev = 'pdf',dev.args=list(family='serif'), fig.pos = '!ht', warning = F, tangle = TRUE)
options(replace.assign=TRUE,width=90)
@

<<echo = FALSE, message = FALSE>>=
# libraries to use
library(ggord)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stargazer)
# library(SWMPr)
devtools::load_all('M:/docs/SWMPr')
library(agricolae)
library(reshape2)
library(Hmisc)
library(gridExtra)

# load data
load('wq_dat.RData')
load('met_dat.RData')
load('nut_dat.RData')
@

\begin{document}

\begin{landscape}
\centering\vspace*{\fill}
<<tsplot, fig.width = 9, fig.height = 5.25, out.height = '5in', echo = FALSE, fig.cap = 'Time series of total precipitation, salinity, pH, and phosphate for Bangs Lake, Grand Bay reserve.  Vertical green bars indicate a heavy rain event in April 2005 and hurricane Isaac in August 2012.  Salinity and pH include a loess smooth to reduce variability. Orthophosphate is colored by event categories in relation to the vertical green bars.  E1A: event 1 acute, E1C: event 1 chronic, NI: non-impact, E2A: event 2 acute, E2C: event 2 chronic.'>>=
# ts plots for BL
# first get cumulative daily precipitation for met
# then combine wq and met, take daily ave, make long form

load(file = 'met_supp.RData')

# met process for totprcp
met_proc <- mutate(met_dat, datetimestamp = as.Date(datetimestamp)) %>% 
  rename(date = datetimestamp) %>% 
  group_by(date, TimeFrame) %>% 
  summarise(totprcp = sum(totprcp, na.rm = TRUE))
met_proc <- rbind(met_proc, met_supp) %>% 
  arrange(date)

# nutrients process for BL phosphorus 
nut_proc <- filter(nut_dat, nutrient == 'PO4F' & StationCode == 'BL') %>% 
  select(-nutrient, -value, -stat_nut, -StationCode) %>% 
  rename(logP = logvalue)
  
# combine wq with met and nut
toplo <- filter(wq_dat, StationCode == 'BL') %>% 
  select(-StationCode, -depth) %>% 
  mutate(datetimestamp = as.Date(datetimestamp)) %>% 
  rename(date = datetimestamp) %>% 
  group_by(date, TimeFrame) %>% 
  summarise_each(funs(mean(., na.rm = TRUE))) %>% 
  full_join(met_proc, by = c('date', 'TimeFrame')) %>% 
  full_join(nut_proc, by = c('date', 'TimeFrame')) %>% 
  gather('variable', 'value', sal:logP) %>% 
  mutate(variable = factor(variable, 
    levels = c('totprcp', 'sal', 'ph', 'logP'),
    labels = c('Total precipitation (mm/d)', 'Salinity (ppt)', 'pH', 'log-Orthophosphate (mg/L)')
    )) %>% 
  rename(Event = TimeFrame)

# event dates
events <- c('2005-04-01', '2012-08-01')
events <- as.Date(events)

# the plot
p <- ggplot(toplo, aes(x = date, y = value)) + 
  geom_line() +
  geom_vline(xintercept = as.numeric(events), colour = 'lightgreen', alpha = 0.6, size = 3) +
  geom_line() +
  geom_point(data = filter(toplo, variable == 'log-Orthophosphate (mg/L)'), alpha = 0.8, size = 3, 
    aes(colour = Event)) + 
  facet_wrap(~variable, scales = 'free_y', ncol = 1) +
  theme_bw() +
  theme(
    axis.title.x = element_blank(), 
    axis.title.y = element_blank()
    ) +
  stat_smooth(data = filter(toplo, variable %in% c('Salinity (ppt)', 'pH')),
    method = 'loess', span = 0.1, n = 2000, se = FALSE, size = 1, colour = 'lightblue')
p
@
\end{landscape}
\clearpage

<<tsplotexp, fig.width = 9, fig.height = 6, echo = FALSE, fig.cap = 'Time series of total precipitation, salinity, and pH for Bangs Lake, Grand Bay reserve.  Plots show six month windows centered (green line) around a heavy rain event in April 2005 and hurricane Isaac in August 2012.  E1A: event 1 acute, E2A: event 2 acute.'>>=
# ts plots for BL, wq only expanded about the events
# first get cumulative daily precipitation for met
# then combine wq and met, take daily ave, make long form

load(file = 'met_supp.RData')

# met process for totprcp
met_proc <- mutate(met_dat, datetimestamp = as.Date(datetimestamp)) %>% 
  rename(date = datetimestamp) %>% 
  group_by(date, TimeFrame) %>% 
  summarise(totprcp = sum(totprcp, na.rm = TRUE))
met_proc <- rbind(met_proc, met_supp) %>% 
  arrange(date)
  
# combine wq with met and nut
toplo <- filter(wq_dat, StationCode == 'BL') %>% 
  select(-StationCode, -depth) %>% 
  mutate(datetimestamp = as.Date(datetimestamp)) %>% 
  rename(date = datetimestamp) %>% 
  group_by(date, TimeFrame) %>% 
  summarise_each(funs(mean(., na.rm = TRUE))) %>% 
  full_join(met_proc, by = c('date', 'TimeFrame')) %>% 
  gather('variable', 'value', sal:totprcp) %>% 
  mutate(variable = factor(variable, 
    levels = c('totprcp', 'sal', 'ph'),
    labels = c('Total precipitation (mm/d)', 'Salinity (ppt)', 'pH')
    )) %>% 
  rename(Event = TimeFrame)

# event dates
events <- c('2005-04-01', '2012-09-01')
events <- rep(as.Date(events), 3)

# subset +- one month from each event
subdts <- c('2005-01-01', '2005-07-01', '2012-06-01', '2012-12-01')
subdts <- as.Date(subdts, format = '%Y-%m-%d')
toplo1 <- filter(toplo, date >= subdts[1] & date <= subdts[2]) %>% 
  mutate(Event = 'E1A')
toplo2 <- filter(toplo, date >= subdts[3] & date <= subdts[4]) %>% 
  mutate(Event = 'E2A')

# plots
p1 <- ggplot(toplo1, aes(x = date, y = value)) + 
  geom_line() +
  geom_vline(xintercept = as.numeric(events[1]), colour = 'lightgreen', alpha = 0.6, size = 2) +
  geom_line() +
  facet_wrap(variable ~ Event, scales = 'free', ncol = 1) +
  theme_bw() +
  theme(
    axis.title.x = element_blank(), 
    axis.title.y = element_blank()
  )
p2 <- ggplot(toplo2, aes(x = date, y = value)) + 
  geom_line() +
  geom_vline(xintercept = as.numeric(events[2]), colour = 'lightgreen', alpha = 0.6, size = 2) +
  geom_line() +
  facet_wrap(variable ~ Event, scales = 'free', ncol = 1) +
  theme_bw() +
  theme(
    axis.title.x = element_blank(), 
    axis.title.y = element_blank()
  )

grid.arrange(p1, p2, ncol = 2)

@
\clearpage

<<tukey, fig.width = 8.5, fig.height = 3, echo = FALSE, fig.cap = 'Boxplot summaries by event of monthly orthophosphate data at Bayou Cumbest (BC), Bangs Lake (BL), and Point aux Chenes (PC) sites in Grand Bay.  Letters indicate events with significantly different events based on Tukey multiple comparison analysis within each site.  Boxes represent the interquartile range (IQR, 25\\textsuperscript{th} to 75\\textsuperscript{th} percentile) with the median as the middle horizonal line.  Outliers are present beyond whiskers (1.5$\\cdot$IQR). Boxes are shaded by medians between sites.  E1A: event 1 acute, E1C: event 1 chronic, NI: non-impact, E2A: event 2 acute, E2C: event 2 chronic.'>>=

load(file = 'nut_dat.RData')

toplo <- filter(nut_dat, StationCode != 'BN' & nutrient == 'PO4F')

timeframes <- c('E1A', 'E1C', 'NI', 'E2A', 'E2C')

# split data by unique station/nutrient variable
sep_data <- split(toplo, toplo$stat_nut)

# run a Tukey multiple comparison for each station, nutrient variable combo
res <- lapply(sep_data, function(x){

  mod <- aov(logvalue ~ TimeFrame, data = x)
  tuk_mod <- HSD.test(mod, 'TimeFrame', group = T)
  grps <- tuk_mod$groups
  grps$trt <- gsub('[[:space:]].*$', '', grps$trt)
  grps
  
  })

# combine results for plotting
res <- do.call('rbind', res) %>% 
  mutate(
    stat_nut = gsub('\\.[0-9]', '', row.names(.)),
    TimeFrame = trt
  ) %>% 
  separate(stat_nut, c('StationCode', 'nutrient'), sep = ' ')
ylocs <- data.frame(nutrient = c('PO4F'), ylims = c(10))
res <- left_join(res, ylocs, by = 'nutrient')
res$TimeFrame <- factor(res$trt, levels = timeframes, labels = timeframes)

# get nutrient/site/timeframe medians then merge with toplo for colors
meds <- group_by(toplo, StationCode, nutrient, TimeFrame) %>% 
  summarise(meds = median(value, na.rm = TRUE))

toplo <- left_join(toplo, meds, by = c('StationCode', 'nutrient', 'TimeFrame'))

ylab <- expression(paste('Orthophosphate (mg ', L^-1, ')'))

# boxplot
p1 <- ggplot(toplo, aes(x = TimeFrame, y = value)) +
  geom_boxplot(aes(fill = meds)) + 
  facet_grid(~ StationCode, scales = 'free_y') +
  scale_y_log10(ylab) +
  theme_bw() + 
  scale_fill_gradientn(colours = RColorBrewer::brewer.pal(9, 'BuGn')[3:9]) + 
  geom_text(data = res, aes(x = TimeFrame, y = ylims, label = M)) + 
  scale_x_discrete('Event') +
  theme(legend.position = 'none')
p1
@
\clearpage

<<phreg, eval = TRUE, echo = FALSE>>=
# select BL, BC, PC, timeframes, summarize by day to reduce
wq_proc <- filter(wq_dat, StationCode %in% c('BL', 'PC', 'BC') & TimeFrame %in% c('E1A', 'NI', 'E2A')) %>% 
  mutate(datetimestamp = as.Date(datetimestamp)) %>% 
  rename(date = datetimestamp) %>% 
  group_by(date, StationCode, TimeFrame) %>% 
  summarise_each(funs(mean(., na.rm = TRUE))) %>% 
  rename(Station = StationCode) %>% 
  droplevels(.)

# split by station for regs
wq_proc <- split(wq_proc, f = wq_proc$TimeFrame)

library(nlme)
tomod <- lapply(wq_proc, function(x) {
  
  # find leading/trailing NA, remove, then fill
  notna <- which(!is.na(x$ph))
  notna <- c(notna[1], notna[length(notna)])
  x <- x[notna[1]:notna[2], ]
  notna <- which(!is.na(x$sal))
  notna <- c(notna[1], notna[length(notna)])
  x <- x[notna[1]:notna[2], ]
  
  x$ph <-zoo::na.approx(x$ph, maxgap = 1e6)
  x$sal <- zoo::na.approx(x$sal, maxgap = 1e6)
  gls(ph ~ sal * Station, data = x, correlation = corAR1(form = ~ 1 | Station))
  
})

stargazer(tomod, column.labels = c('E1A', 'NI', 'E2A'), 
  title = 'Results for generalized least squares models of pH as a function of salinity and station, including interactions.  The constant value is the intercept term defined as mean salinity at Bayou Cumbust (BC) with all other coefficients describing the change in ph from the intercept in relation to each fixed parameter.  One model was created for each time frame.  A first-order autoregressive structure conditional on station was used to account for time-dependent correlation among model residuals.')
@
\clearpage

<<ccfwq, echo = FALSE, eval = T>>=
# # pre-process wq for stations, timeframe and equal lags
# wq_proc <- filter(wq_dat, StationCode %in% c('BL', 'PC', 'BC')) %>% 
#   rename(Station = StationCode) %>% 
#   filter(strftime(datetimestamp, '%M') %in% c('00', '30')) %>% # this has to be done to make lags valid
#   gather(wq, value, sal:depth)
# 
# # seasonal decomp all
# wq_proc <- split(wq_proc, f = wq_proc[, c('Station', 'wq')])
# wq_proc <- lapply(wq_proc, function(x){
# 
#   # create continuous timestep
#   x <- x[order(x$date), ]
#   x <- setstep(x, date_col = 'datetimestamp', timestep = 30)
#   
#   # fill missing values
#   x$value_fl <- zoo::na.approx(x$value, maxgap = 1e6)
# 
#   # decomp
#   if(unique(x$wq) == 'depth'){
#     
#     x$value_dc <- x$value # the decomped value for depth is just the actual value
#     
#   } else { 
#     
#     dc <- decomp(x, param = 'value_fl', 'datetimestamp', type = 'multiplicative', 
#       frequency = 'annual')
#     x$value_dc <- x$value_fl/dc$seasonal
#     
#   }
# 
#   x <- x[order(x$date), ]
#   
#   return(x)
#   
# })
# 
# wq_proc <- do.call('rbind', wq_proc)
# row.names(wq_proc) <- 1:nrow(wq_proc)
# 
# # filter time frames
# wq_proc <- filter(wq_proc, TimeFrame %in% c('E1A', 'E2A'))
# 
# wq_noseas <- wq_proc
# save(wq_noseas, file = 'wq_noseas.RData')

load(file = 'wq_noseas.RData')
wq_proc <- wq_noseas

# ggplot(wq_proc, aes(x = datetimestamp, y = value)) +
#   geom_line() +
#   facet_wrap(Station ~ wq, scales = 'free_y', ncol = 2) + 
#   theme_bw()
# 
# ggplot(wq_proc, aes(x = datetimestamp, y = value_dc)) +
#   geom_line() +
#   facet_wrap(Station ~ wq, scales = 'free_y', ncol = 2) + 
#   theme_bw()

#ccf functions
wq_ccf <- function(dat_in, stats, val_nm){
  
  # retain relevant columns, rename spread column
  dat_in <- dat_in[, c('TimeFrame', 'Station', 'datetimestamp', 'wq', val_nm)]
  names(dat_in)[names(dat_in) %in% val_nm] <- 'tospread'
  
  # filter dat_in for station data, reformat for analysis
  toproc <- filter(dat_in, Station %in% stats) %>% 
    spread(Station, tospread) %>% 
    mutate(TimeFrame = factor(TimeFrame, levels = c('E1A', 'E2A')))
  toproc <- na.omit(toproc)
  
  toproc <- split(toproc, f = list(toproc$TimeFrame, toproc$wq))
  
  # ccf for timeframe, wq var combos
  toproc <- lapply(toproc, function(x){
    if(length(unique(diff(x$datetime))) > 1) browser()
    cors <- ccf(x[, stats[1]], x[, stats[2]], plot = FALSE) # no napass, correlation only
    ind <- which.max(cors$acf)
    out <- with(cors, c(lag[ind], acf[ind]))
    names(out) <- c('lag', 'cor')
    return(out)
  })
  
  return(toproc)
  
}

# get station combos
combs <- combn(unique(wq_proc$Station), 2, simplify = F)

# get ccf results
wqres <- lapply(combs, function(x) wq_ccf(wq_proc, x, 'value_fl'))
combs <- unlist(lapply(combs, paste, collapse = ' - '))
names(wqres) <- combs

# format for table
wqres <- lapply(wqres, function(x) do.call('rbind', x)) %>% 
  melt(.) %>% 
  separate(Var1, c('Event', 'wqvar')) %>% 
  unite('comb', Event, Var2) %>% 
  spread(comb, value)
  
nms <- c('wqvar', 'L1', 'E1A_lag', 'E1A_cor', 'E2A_lag', 'E2A_cor')
wqres <- wqres[, nms]
  
# table output
totab <- wqres[, -c(1:2)]
totab <- round(totab, 2)
names(totab) <- c('Lag', 'Correlation', 'Lag', 'Correlation')

cap.val <- 'Results of cross-correlation analyses comparing water quality time series between sites at Grand Bay during the two acute event periods.  Values for tidal height (m), pH, and salinity (ppt) are the lags in the compared time series between sites at which the maximum correlation was observed.  Negative lags indicate observations were leading at the first site relative to the second, whereas positive lags indicate observations lagged at the first site relative to the second.  One lag is thirty minutes.'
rgroups <- unique(wqres$wqvar) %>% 
  factor(., levels = c('ph', 'sal', 'depth'), labels = c('pH', 'Salinity', 'Tidal height'))

foot.val <- '\\footnotesize BC: Bayou Cumbest, BL: Bangs Lake, PC: Point aux Chenes' 

latex( 
  totab,
  file = '',
  rowlabel = 'Site comparisons',
  caption = cap.val,
  caption.loc = 'top',
  rgroup = rgroups,
  n.rgroup = rep(3, 3),
  cgroup = c('First acute event (E1A)', 'Second acute event (E2A)'),
  n.cgroup = c(2, 2),
  rowname = wqres$L1,
  label = 'tab:ccfwq',
  insert.bottom = foot.val,
  col.just = c('r', 'c', 'r', 'c')
  )

@
\clearpage

<<ccfwqdc, echo = FALSE, eval = T>>=
load(file = 'wq_noseas.RData')
wq_proc <- wq_noseas

# remove depth
wq_proc <- filter(wq_proc, wq != 'depth') %>% 
  droplevels(.)
  
#ccf functions
wq_ccf <- function(dat_in, stats, val_nm){
  
  # retain relevant columns, rename spread column
  dat_in <- dat_in[, c('TimeFrame', 'Station', 'datetimestamp', 'wq', val_nm)]
  names(dat_in)[names(dat_in) %in% val_nm] <- 'tospread'
  
  # filter dat_in for station data, reformat for analysis
  toproc <- filter(dat_in, Station %in% stats) %>% 
    spread(Station, tospread) %>% 
    mutate(TimeFrame = factor(TimeFrame, levels = c('E1A', 'E2A')))
  toproc <- na.omit(toproc)
    
  toproc <- split(toproc, f = list(toproc$TimeFrame, toproc$wq))
  
  # ccf for timeframe, wq var combos
  toproc <- lapply(toproc, function(x){
    if(length(unique(diff(x$datetime))) > 1) browser()
    cors <- ccf(x[, stats[1]], x[, stats[2]], plot = FALSE) # no napass, correlation only
    ind <- which.max(cors$acf)
    out <- with(cors, c(lag[ind], acf[ind]))
    names(out) <- c('lag', 'cor')
    return(out)
  })
  
  return(toproc)
  
}

# get station combos
combs <- combn(unique(wq_proc$Station), 2, simplify = F)

# get ccf results
wqres <- lapply(combs, function(x) wq_ccf(wq_proc, x, 'value_dc'))
combs <- unlist(lapply(combs, paste, collapse = ' - '))
names(wqres) <- combs

# format for table
wqres <- lapply(wqres, function(x) do.call('rbind', x)) %>% 
  melt(.) %>% 
  separate(Var1, c('Event', 'wqvar')) %>% 
  unite('comb', Event, Var2) %>% 
  spread(comb, value)
  
nms <- c('wqvar', 'L1', 'E1A_lag', 'E1A_cor', 'E2A_lag', 'E2A_cor')
wqres <- wqres[, nms]
  
# table output
totab <- wqres[, -c(1:2)]
totab <- round(totab, 2)
names(totab) <- c('Lag', 'Correlation', 'Lag', 'Correlation')

cap.val <- 'Results of cross-correlation analyses comparing water quality time series between sites at Grand Bay during the two acute event periods.  Seasonal components of each time series are removed.  Values for pH and salinity (ppt) are the lags in the compared time series between sites at which the maximum correlation was observed.  Negative lags indicate observations were leading at the first site relative to the second, whereas positive lags indicate observations lagged at the first site relative to the second.  One lag is thirty minutes.'
rgroups <- unique(wqres$wqvar) %>% 
  factor(., levels = c('ph', 'sal'), labels = c('pH', 'Salinity'))

foot.val <- '\\footnotesize BC: Bayou Cumbest, BL: Bangs Lake, PC: Point aux Chenes' 

latex( 
  totab,
  file = '',
  rowlabel = 'Site comparisons',
  caption = cap.val,
  caption.loc = 'top',
  rgroup = rgroups,
  n.rgroup = rep(3, 2),
  cgroup = c('First acute event (E1A)', 'Second acute event (E2A)'),
  n.cgroup = c(2, 2),
  rowname = wqres$L1,
  label = 'tab:ccfwq',
  insert.bottom = foot.val,
  col.just = c('r', 'c', 'r', 'c')
  )

@
\clearpage

<<ccfnut, echo = FALSE, eval = T>>=
# pre-process nut for stations, timeframe
nut_proc <- filter(nut_dat, StationCode %in% c('BL', 'PC', 'BC')) %>% 
  rename(Station = StationCode) %>% 
  select(-stat_nut, -value)

# seasonal decomp all, must be continuous by month
nut_proc <- split(nut_proc, f = nut_proc[, c('Station', 'nutrient')])
nut_proc <- lapply(nut_proc, function(x){

  # decompose
  dc <- decomp_cj(x, param = 'logvalue', 'date', type = 'mult', vals_out = T)
  
  # find leading/trailing NA, remove, then fill
  notna <- which(!is.na(dc$original))
  notna <- c(notna[1], notna[length(notna)])
  dc <- dc[notna[1]:notna[2], ]
  dc$original <- zoo::na.approx(dc$original, maxgap = 1e6)

  dc$dc <- dc$original/dc$seasonal

  # subset by timeframes
  brks <- c('07-01-2006', '03-01-2008', '09-01-2012', '02-01-2014') %>% 
  as.Date(format = '%m-%d-%Y') %>% 
    c(-Inf, ., Inf)
  labs <- c('E1A', 'E1C', 'NI', 'E2A', 'E2C')
  dc$TimeFrame <- cut(as.numeric(dc$Time), breaks = brks, labels = labs, 
    right = FALSE) # open on right
  
  return(dc[, c('Time', 'TimeFrame', 'original', 'dc')])
  
})

nut_proc <- do.call('rbind', nut_proc)
nut_proc$ind <- row.names(nut_proc)
nut_proc$Station <- gsub('\\..*$', '', nut_proc$ind)
nut_proc$nutrient <- gsub('^[A-Z][A-Z]\\.|\\.[0-9]*$', '', nut_proc$ind)
row.names(nut_proc) <- 1:nrow(nut_proc)
nut_proc$ind <- NULL
nut_proc <- rename(nut_proc, date = Time)

# filter time frames 1234qwasdfjasdfja;sk
nut_proc <- filter(nut_proc, TimeFrame %in% c('E1A', 'E2A'))

# ggplot(nut_proc, aes(x = date, y = logvalue)) +
#   geom_line() +
#   facet_wrap(Station ~ nutrient, scales = 'free_y') + 
#   theme_bw()
# 
# ggplot(nut_proc, aes(x = date, y = logvalue_dc)) +
#   geom_line() +
#   facet_wrap(Station ~ nutrient, scales = 'free_y') + 
#   theme_bw()

#ccf functions
nut_ccf <- function(dat_in, stats, val_nm){
  
  # retain relevant columns, rename spread column
  dat_in <- dat_in[, c('TimeFrame', 'Station', 'date', 'nutrient', val_nm)]
  names(dat_in)[names(dat_in) %in% val_nm] <- 'tospread'
  
  # filter dat_in for station data, reformat for analysis
  toproc <- filter(dat_in, Station %in% stats) %>% 
    spread(Station, tospread) %>% 
    mutate(TimeFrame = factor(TimeFrame, levels = c('E1A', 'E2A')))
  
  toproc <- split(toproc, f = list(toproc$TimeFrame, toproc$nutrient))
  
  # ccf for timeframe, wq var combos
  toproc <- lapply(toproc, function(x){
    
    x <- na.omit(x)
    if(any(!unique(diff(x$date) %in% c('30', '31', '28')))) browser()
    cors <- ccf(x[, stats[1]], x[, stats[2]], plot = FALSE)
    ind <- which.max(cors$acf)
    out <- with(cors, c(lag[ind], acf[ind]))
    names(out) <- c('lag', 'cor')
    return(out)
    
  })

  return(toproc)
  
}

# get station combos
combs <- combn(unique(nut_proc$Station), 2, simplify = F)

# get ccf results
nutres <- lapply(combs, function(x) nut_ccf(nut_proc, x, 'original'))
combs <- unlist(lapply(combs, paste, collapse = ' - '))
names(nutres) <- combs

# format for table
nutres <- lapply(nutres, function(x) do.call('rbind', x)) %>% 
  melt(.) %>% 
  separate(Var1, c('Event', 'nutvar'), sep = '\\.') %>% 
  unite('comb', Event, Var2) %>% 
  spread(comb, value)
  
nms <- c('nutvar', 'L1', 'E1A_lag', 'E1A_cor', 'E2A_lag', 'E2A_cor')
nutres <- nutres[, nms]
  
# table output
totab <- nutres[, -c(1:2)]
totab <- round(totab, 2)
names(totab) <- c('Lag', 'Correlation', 'Lag', 'Correlation')

cap.val <- 'Results of cross-correlation analyses comparing nutrient time series between sites at Grand Bay during the two acute event periods.  Values are the lags for each nutrient variable in the compared time series between sites at which the maximum correlation was observed.  Negative lags indicate observations were leading at the first site relative to the second, whereas positive lags indicate observations lagged at the first site relative to the second.  One lag is one month.'
rgroups <- unique(nutres$nutvar) %>% 
  factor(., levels = c('CHLA_N', 'NH4F', 'NO23F', 'PO4F'), 
    labels = c('Chlorophyll a', 'Ammonium', 'Nitrite + Nitrate', 'Orthophosphate')
  )

foot.val <- '\\footnotesize BC: Bayou Cumbest, BL: Bangs Lake, PC: Point aux Chenes' 

latex( 
  totab,
  file = '',
  rowlabel = 'Site comparisons',
  caption = cap.val,
  caption.loc = 'top',
  rgroup = rgroups,
  n.rgroup = rep(3, 4),
  cgroup = c('First acute event (E1A)', 'Second acute event (E2A)'),
  n.cgroup = rep(2, 2),
  rowname = nutres$L1,
  label = 'tab:ccfnut',
  insert.bottom = foot.val, 
  col.just = c('r', 'c', 'r', 'c')
  )

@
\clearpage

<<ccfnutdc, echo = FALSE, eval = T>>=
# pre-process nut for stations, timeframe
nut_proc <- filter(nut_dat, StationCode %in% c('BL', 'PC', 'BC')) %>% 
  rename(Station = StationCode) %>% 
  select(-stat_nut, -value)

# seasonal decomp all, must be continuous by month
nut_proc <- split(nut_proc, f = nut_proc[, c('Station', 'nutrient')])
nut_proc <- lapply(nut_proc, function(x){

  # decompose
  dc <- decomp_cj(x, param = 'logvalue', 'date', type = 'mult', vals_out = T)
  
  # find leading/trailing NA, remove, then fill
  notna <- which(!is.na(dc$original))
  notna <- c(notna[1], notna[length(notna)])
  dc <- dc[notna[1]:notna[2], ]
  dc$original <- zoo::na.approx(dc$original, maxgap = 1e6)

  dc$dc <- dc$original/dc$seasonal

  # subset by timeframes
  brks <- c('07-01-2006', '03-01-2008', '09-01-2012', '02-01-2014') %>% 
  as.Date(format = '%m-%d-%Y') %>% 
    c(-Inf, ., Inf)
  labs <- c('E1A', 'E1C', 'NI', 'E2A', 'E2C')
  dc$TimeFrame <- cut(as.numeric(dc$Time), breaks = brks, labels = labs, 
    right = FALSE) # open on right
  
  return(dc[, c('Time', 'TimeFrame', 'original', 'dc')])
  
})

nut_proc <- do.call('rbind', nut_proc)
nut_proc$ind <- row.names(nut_proc)
nut_proc$Station <- gsub('\\..*$', '', nut_proc$ind)
nut_proc$nutrient <- gsub('^[A-Z][A-Z]\\.|\\.[0-9]*$', '', nut_proc$ind)
row.names(nut_proc) <- 1:nrow(nut_proc)
nut_proc$ind <- NULL
nut_proc <- rename(nut_proc, date = Time)

# filter time frames 1234qwasdfjasdfja;sk
nut_proc <- filter(nut_proc, TimeFrame %in% c('E1A', 'E2A'))

# ggplot(nut_proc, aes(x = date, y = logvalue)) +
#   geom_line() +
#   facet_wrap(Station ~ nutrient, scales = 'free_y') + 
#   theme_bw()
# 
# ggplot(nut_proc, aes(x = date, y = logvalue_dc)) +
#   geom_line() +
#   facet_wrap(Station ~ nutrient, scales = 'free_y') + 
#   theme_bw()

#ccf functions
nut_ccf <- function(dat_in, stats, val_nm){
  
  # retain relevant columns, rename spread column
  dat_in <- dat_in[, c('TimeFrame', 'Station', 'date', 'nutrient', val_nm)]
  names(dat_in)[names(dat_in) %in% val_nm] <- 'tospread'
  
  # filter dat_in for station data, reformat for analysis
  toproc <- filter(dat_in, Station %in% stats) %>% 
    spread(Station, tospread) %>% 
    mutate(TimeFrame = factor(TimeFrame, levels = c('E1A', 'E2A')))
  
  toproc <- split(toproc, f = list(toproc$TimeFrame, toproc$nutrient))
  
  # ccf for timeframe, wq var combos
  toproc <- lapply(toproc, function(x){
    
    x <- na.omit(x)
    if(any(!unique(diff(x$date) %in% c('30', '31', '28')))) browser()
    cors <- ccf(x[, stats[1]], x[, stats[2]], plot = FALSE)
    ind <- which.max(cors$acf)
    out <- with(cors, c(lag[ind], acf[ind]))
    names(out) <- c('lag', 'cor')
    return(out)
    
  })

  return(toproc)
  
}


# get station combos
combs <- combn(unique(nut_proc$Station), 2, simplify = F)

# get ccf results
nutres <- lapply(combs, function(x) nut_ccf(nut_proc, x, 'dc'))
combs <- unlist(lapply(combs, paste, collapse = ' - '))
names(nutres) <- combs

# format for table
nutres <- lapply(nutres, function(x) do.call('rbind', x)) %>% 
  melt(.) %>% 
  separate(Var1, c('Event', 'nutvar'), sep = '\\.') %>% 
  unite('comb', Event, Var2) %>% 
  spread(comb, value)
  
nms <- c('nutvar', 'L1', 'E1A_lag', 'E1A_cor', 'E2A_lag', 'E2A_cor')
nutres <- nutres[, nms]
  
# table output
totab <- nutres[, -c(1:2)]
totab <- round(totab, 2)
names(totab) <- c('Lag', 'Correlation', 'Lag', 'Correlation')

cap.val <- 'Results of cross-correlation analyses comparing nutrient time series between sites at Grand Bay during the two acute event periods.  Nutrient time series were decomposed to remove the seasonal component.  Values are the lags for each nutrient variable in the compared time series between sites at which the maximum correlation was observed.  Negative lags indicate observations were leading at the first site relative to the second, whereas positive lags indicate observations lagged at the first site relative to the second.  One lag is one month.'
rgroups <- unique(nutres$nutvar) %>% 
  factor(., levels = c('CHLA_N', 'NH4F', 'NO23F', 'PO4F'), 
    labels = c('Chlorophyll a', 'Ammonium', 'Nitrite + Nitrate', 'Orthophosphate')
  )

foot.val <- '\\footnotesize BC: Bayou Cumbest, BL: Bangs Lake, PC: Point aux Chenes' 

latex( 
  totab,
  file = '',
  rowlabel = 'Site comparisons',
  caption = cap.val,
  caption.loc = 'top',
  rgroup = rgroups,
  n.rgroup = rep(3, 4),
  cgroup = c('First acute event (E1A)', 'Second acute event (E2A)'),
  n.cgroup = rep(2, 2),
  rowname = nutres$L1,
  label = 'tab:ccfnut',
  insert.bottom = foot.val, 
  col.just = c('r', 'c', 'r', 'c')
  )

@
\clearpage

% appendix boxplots
<<boxplt_all, fig.width = 8, fig.height = 6,, fig.cap = 'Boxplot summaries by event of nutrient data at Bayou Cumbest (BC), Bangs Lake (BL), and Point aux Chenes (PC) sites at Grand Bay.  Letters indicate significantly different events based on Tukey multiple comparison analyses for each unique site and nutrient value combination.  Boxes represent the interquartile range (IQR, 25\\textsuperscript{th} to 75\\textsuperscript{th} percentile) with the median as the middle horizonal line.  Boxes are colored by relative median nutrients between sites.  Outliers are present beyond whiskers (1.5$\\cdot$IQR). E1A: event 1 acute, E1C: event 1 chronic, NI: non-impact, E2A: event 2 acute, E2C: event 2 chronic.', echo = FALSE>>=

load(file = 'nut_dat.RData')

# remove BN, phosphorus
toplo <- filter(nut_dat, StationCode != 'BN' & nutrient != 'PO4F') 
toplo$nutrient <- droplevels(toplo$nutrient)

timeframes <- c('E1A', 'E1C', 'NI', 'E2A', 'E2C')

# split data by unique station/nutrient variable
sep_data <- split(toplo, toplo$stat_nut)

# run a Tukey multiple comparison for each station, nutrient variable combo
res <- lapply(sep_data, function(x){

  mod <- aov(logvalue ~ TimeFrame, data = x)
  tuk_mod <- HSD.test(mod, 'TimeFrame', group = T)
  grps <- tuk_mod$groups
  grps$trt <- gsub('[[:space:]].*$', '', grps$trt)
  grps
  
  })

# combine results for plotting
res <- do.call('rbind', res) %>% 
  mutate(
    stat_nut = gsub('\\.[0-9]', '', row.names(.)),
    TimeFrame = trt
  ) %>% 
  separate(stat_nut, c('StationCode', 'nutrient'), sep = ' ')
ylocs <- data.frame(nutrient = c('PO4F', 'NH4F', 'NO23F', 'CHLA_N'), ylims = c(10, 10, 1, 100))
res <- left_join(res, ylocs, by = 'nutrient')
res$TimeFrame <- factor(res$trt, levels = timeframes, labels = timeframes)

# get nutrient/site/timeframe medians then merge with toplo for colors
meds <- group_by(toplo, StationCode, nutrient, TimeFrame) %>% 
  summarise(meds = median(value, na.rm = TRUE))
meds <- split(meds, meds$nutrient)
meds <- lapply(meds, function(x){
  
  x$rnks <- scales::rescale(x$meds, c(0, 1))
  return(x)
  
  })
meds <- do.call('rbind', meds)

toplo <- left_join(toplo, meds, by = c('StationCode', 'nutrient', 'TimeFrame'))

# setup facet labels
facet1_names <- list(
  'BC' = 'BC', 
  'BL' = 'BL',
  'PC' =  'PC'
  )
facet2_names <- list(
  'NH4F' = expression(paste('Ammonium (mg', L^-1, ')')), 
  'NO23F' = expression(paste('Nitrite + Nitrate (mg', L^-1, ')')),
  'CHLA_N' = expression(paste('Chlorophyll-a (ug', L^-1, ')'))
  )

plot_labeller <- function(variable,value){
  if (variable=='StationCode')
    return(facet1_names[value])
  if (variable=='nutrient')
    return(facet2_names[value])
  }

# boxplot
p1 <- ggplot(toplo, aes(x = TimeFrame, y = value)) +
  geom_boxplot(aes(fill = rnks)) + 
  facet_grid(nutrient ~ StationCode, scales = 'free_y', labeller = plot_labeller) +
  scale_y_log10() +
  theme_bw() + 
  theme(legend.position = 'none') + 
  scale_x_discrete('Event') +
  scale_fill_gradientn(colours = RColorBrewer::brewer.pal(9, 'BuGn')[3:9]) + 
  geom_text(data = res, aes(x = TimeFrame, y = ylims, label = M))
p1

@

\end{document}